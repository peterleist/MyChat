{"version":3,"sources":["Chat/Proxy.ts","Chat/chat.ts","Components/TextInput.tsx","Chat/Login.tsx","Components/TextInputAndButton.tsx","Components/ConversationCard.tsx","Components/LeftPane.tsx","Components/MessageCard.tsx","Components/RightPane.tsx","Chat/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","server","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","src","width","alt","handleChange","onClick","href","preventDefault","console","log","startsWith","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","toDateString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.edb645a1.chunk.js","sourcesContent":["import { MessageDto, EventProducer, IncomingPacket, OutgoingPacket, InboxDto } from \"./chat\";\r\n\r\n\r\n\r\ninterface ProxyEventMap {     \r\n    \"login\": () => void;     \r\n    \"message\": ( channelId: string, message: MessageDto ) => void;     \r\n    \"conversation\": ( channelId: string ) => void; \r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap> {     \r\n    private ws: WebSocket; \r\n    \r\n    inbox: (InboxDto | null) = null; \r\n\r\n    constructor(server: string) {         \r\n        super();\r\n\r\n        this.ws = new WebSocket( server );         \r\n        \r\n        //this.ws.addEventListener( \"open\", () => {             \r\n        //  this.ws.send( \"Hello\" );         \r\n        //});         \r\n        \r\n        this.ws.addEventListener( \"message\", e => {     \r\n            let p = JSON.parse( e.data ) as IncomingPacket;     \r\n            switch ( p.type ) {         \r\n                case \"error\": \r\n                    alert( p.message );\r\n                    break;         \r\n                case \"login\":             \r\n                    this.inbox = p.inbox;    \r\n                    this.dispatch(\"login\")         \r\n                    break;         \r\n                case \"message\":             \r\n                    let cid = p.channelId;             \r\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );             \r\n                    this.dispatch(\"message\", cid, p.message);       \r\n                    break;         \r\n                case \"conversationAdded\":             \r\n                    this.inbox!.conversations.push( p.conversation );  \r\n                    this.dispatch(\"conversation\", p.conversation.channelId);              \r\n                    break;     \r\n            } \r\n        })\r\n\r\n    } \r\n\r\n    sendPacket( packet: OutgoingPacket ) {     \r\n        this.ws.send( JSON.stringify( packet ) ); \r\n    }\r\n    \r\n} \r\n\r\nexport var proxy = new Proxy(\"wss://raja.aut.bme.hu/chat/\");","export interface MessageDto {     \r\n    id: number;     \r\n    timeStamp: string;    \r\n    referenceTo: number; // 0: normal message, +: update, -: delete     \r\n    senderId: string;     \r\n    contentType: number;     \r\n    content: string; \r\n}\r\n\r\nexport interface UserDto {     \r\n    id: string;     \r\n    displayName: string;     \r\n    tag: string;     \r\n    lastSeen: string; \r\n}\r\n\r\nexport interface ConversationDto {     \r\n    channelId: string;     \r\n    parentChannelId: string;     \r\n    name: string;     \r\n    description: string;     \r\n    data: string;     \r\n    state: number; // disconnected, outgoingRequest, incomingRequest, accepted, group     \r\n    access: number; // none, read, write, admin     \r\n    notificationLevel: number; // none, gray, push     \r\n    unreadCount: number;     \r\n    memberIds: string[];     \r\n    lastMessages: MessageDto[];\r\n}\r\n\r\nexport interface InboxDto {     \r\n    user: UserDto;     \r\n    contacts: UserDto[];     \r\n    conversations: ConversationDto[]; \r\n} \r\n\r\nexport type OutgoingPacket = \r\n    { type: \"login\", email: string, password: string, staySignedIn: boolean } |     \r\n    { type: \"loginWithToken\", token: string } |     \r\n    { type: \"register\", email: string, password: string, displayName: string, staySignedIn: boolean } |     \r\n    { type: \"contactRequest\", email: string, firstMessage: string } |     \r\n    { type: \"message\", channelId: string, referenceTo: number, contentType: number, content: string };\r\n\r\nexport type IncomingPacket =     \r\n    { type: \"error\", message: string } |     \r\n    { type: \"login\", query: string, token: string, inbox: InboxDto } |     \r\n    { type: \"message\", channelId: string, message: MessageDto } |     \r\n    { type: \"conversationAdded\", conversation: ConversationDto } |     \r\n    { type: \"conversationRemoved\", channelId: string } |     \r\n    { type: \"user\", user: UserDto };\r\n\r\nexport class EventProducer<M> {     \r\n\r\n    private listeners: { \r\n        type: keyof M, \r\n        listener, \r\n        obj?: Object \r\n    }[] = []; \r\n\r\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object ) {        \r\n        this.listeners.push( { type, listener, obj } );     \r\n    }\r\n\r\n    removeEventListener<K extends keyof M>( type: K, listener: M[ K ] ) {         \r\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );     \r\n    }\r\n\r\n    protected dispatch<K extends keyof M>( type: K, ...args ) {     \r\n        for ( let listener of this.listeners.filter( x => x.type === type ) )         \r\n            listener.listener.call( listener.obj, ...args ); \r\n    }\r\n\r\n    removeAllEventListener( obj: Object ) {     \r\n        if ( !obj ) throw new Error( \"Must specify object\" );     \r\n        this.listeners = this.listeners.filter( x => x.obj !== obj ); \r\n    }\r\n\r\n}","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport './TextInput.css'\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\n\r\nexport class TextInput extends Component<TextInputOptions>{\r\n    state = { value: this.props.value, focus: false };\r\n\r\n\r\n\r\n    render() {\r\n\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n\r\n\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}{...attrs}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from './Proxy';\r\nimport { TextInput } from '../Components/TextInput';\r\n\r\nexport class Login extends Component {\r\n\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" alt=\"img\" />\r\n\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\r\n                    onChange={e => this.handleChange(e)} onEnter={() => this.onClick()} autofocus={true} />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password}\r\n                    onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()}/>\r\n\r\n\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e })} onEnter={ () => this.onClick() }/>}\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => {\r\n                        e.preventDefault();\r\n                        this.setState(state => ({ register: !this.state.register })); // pass a function instead of object\r\n                    }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n\r\n            </div>);\r\n    }\r\n\r\n    handleChange(e: string) {\r\n        console.log('handle change called')\r\n        this.setState({\r\n            email: e,\r\n            displayName: e === \"H5DK7B\" ? \"Soma\" : this.state.displayName\r\n        })\r\n    }\r\n\r\n    personalEmailCode(e: string) {\r\n        this.setState({\r\n            email: e,\r\n            displayName: e.startsWith(\"H5DK7B\") ? \"Soma\" : this.state.displayName\r\n        });\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n    }\r\n\r\n}","import { TextInputOptions, TextInput } from \"./TextInput\";\r\nimport React, { Component } from \"react\";\r\n\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={ this.textInput } onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Component } from \"react\";\r\nimport { ConversationDto } from \"../Chat/chat\";\r\nimport React from \"react\";\r\nimport { proxy } from \"../Chat/Proxy\";\r\n\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { InboxDto, ConversationDto } from \"../Chat/chat\";\r\nimport React from \"react\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\n\r\nimport { ConversationCard } from \"./ConversationCard\";\r\nimport { proxy } from \"../Chat/Proxy\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n}\r\n","import { PureComponent } from \"react\";\r\nimport { MessageDto } from \"../Chat/chat\";\r\nimport React from \"react\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toDateString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { ConversationDto } from \"../Chat/chat\";\r\n\r\nimport React from \"react\";\r\nimport { MessageCard } from \"./MessageCard\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { proxy } from \"../Chat/Proxy\";\r\n\r\n\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>{\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId) this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPacket({\r\n            type: \"message\",\r\n            channelId: this.props.conversation!.channelId,\r\n            referenceTo: 0,\r\n            contentType: 0,\r\n            content: \"H: \" + text\r\n        });\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport React from \"react\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { LeftPane } from \"../Components/LeftPane\";\r\nimport { RightPane } from \"../Components/RightPane\";\r\n\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Login } from './Chat/Login';\n\nimport { Main } from './Chat/Main';\nimport { proxy } from './Chat/Proxy';\n\nexport default class App extends Component\n{\n  render()   {     \n    return (       \n      <div className=\"app\">         \n        { (proxy.inbox == null) ? <Login /> : <Main /> }\n      </div>     \n    );   \n  } \n\n  componentDidMount() {\n    proxy.addEventListener(\"login\", () => this.forceUpdate(), this);\n  }\n  \n  componentWillUnmount() {\n    proxy.removeAllEventListener(this);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n"],"sourceRoot":""}